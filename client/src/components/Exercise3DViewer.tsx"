import React, { useEffect, useRef, useState } from 'react';
import '@google/model-viewer';

// Default model if model fails to load
const DEFAULT_MODEL = 'https://modelviewer.dev/shared-assets/models/Astronaut.glb';

declare global {
  namespace JSX {
    interface IntrinsicElements {
      'model-viewer': React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement> & {
        src: string;
        alt: string;
        poster?: string;
        'shadow-intensity'?: string;
        'camera-controls'?: boolean | string;
        autoplay?: boolean | string;
        'ar'?: boolean | string;
        'ar-modes'?: string;
        'ar-scale'?: string;
        'environment-image'?: string;
        'auto-rotate'?: boolean | string;
        'rotation-per-second'?: string;
        'field-of-view'?: string;
      }, HTMLElement>;
    }
  }
}

interface Exercise3DViewerProps {
  modelSrc: string;
  posterSrc?: string;
  alt: string;
  className?: string;
  aspectRatio?: string;
}

const Exercise3DViewer: React.FC<Exercise3DViewerProps> = ({
  modelSrc,
  posterSrc,
  alt,
  className = '',
  aspectRatio = '16/9',
}) => {
  const modelViewerRef = useRef<HTMLElement>(null);
  const [modelLoaded, setModelLoaded] = useState(false);
  const [modelError, setModelError] = useState(false);
  const [actualModelSrc, setActualModelSrc] = useState(modelSrc);
  
  // Ensure the model URL is properly formed
  useEffect(() => {
    const isValidUrl = (url: string) => {
      try {
        new URL(url);
        return true;
      } catch (e) {
        return false;
      }
    };
    
    // If the modelSrc is not a valid URL or doesn't exist, use the default
    if (!modelSrc || !isValidUrl(modelSrc)) {
      console.log("Using default model because source is invalid:", modelSrc);
      setActualModelSrc(DEFAULT_MODEL);
    } else {
      setActualModelSrc(modelSrc);
    }
  }, [modelSrc]);

  useEffect(() => {
    const modelViewer = modelViewerRef.current;
    if (!modelViewer) return;

    const handleLoad = () => {
      console.log('3D model loaded successfully:', actualModelSrc);
      setModelLoaded(true);
      setModelError(false);
    };

    const handleError = () => {
      console.error('Error loading 3D model:', actualModelSrc);
      setModelError(true);
      
      // Fall back to the default model if the specified model fails
      if (actualModelSrc !== DEFAULT_MODEL) {
        console.log("Falling back to default model");
        setActualModelSrc(DEFAULT_MODEL);
      }
    };

    modelViewer.addEventListener('load', handleLoad);
    modelViewer.addEventListener('error', handleError);

    return () => {
      modelViewer.removeEventListener('load', handleLoad);
      modelViewer.removeEventListener('error', handleError);
    };
  }, [actualModelSrc]);

  return (
    <div className={`relative ${className}`} style={{ aspectRatio: aspectRatio }}>
      <model-viewer
        ref={modelViewerRef}
        src={actualModelSrc}
        alt={alt}
        poster={posterSrc}
        shadow-intensity="1"
        camera-controls="true"
        auto-rotate="true"
        rotation-per-second="30deg"
        environment-image="neutral"
        ar="true"
        ar-modes="webxr scene-viewer quick-look"
        ar-scale="fixed"
        style={{ width: '100%', height: '100%', backgroundColor: '#f2f2f2', borderRadius: '0.5rem' }}
      >
        {!modelLoaded && !modelError && (
          <div slot="progress-bar" className="absolute inset-0 flex items-center justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
          </div>
        )}
        
        {modelError && (
          <div slot="error" className="absolute inset-0 flex flex-col items-center justify-center p-4 text-center">
            <p className="text-red-500 mb-2">Error loading 3D model</p>
            <p className="text-sm text-gray-500">Please try again later or view the video demonstration instead</p>
          </div>
        )}
      </model-viewer>
    </div>
  );
};

export default Exercise3DViewer;
